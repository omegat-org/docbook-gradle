import org.omegat.documentation.DocbookHtml
import org.omegat.documentation.StylesheetTask
import org.omegat.documentation.WhcTask
import org.omegat.documentation.XIncludeTask

plugins {
    id 'org.omegat.documentation'
}

def documentRootDir = file('src/docs')
def styleRootDir = file('src/docs/xsl')

docConfig {
    styleDir.set(styleRootDir)
    docRoot.set(documentRootDir)
    outputRoot.set(layout.buildDirectory.dir('docs/manual'))
}

tasks.register('genDocIndex', Copy) {
    def docPropsFiles = fileTree(dir: 'src/docs', include: '*/version*.properties').findAll {
        file("${it.parent}/OmegaTUsersManual_xinclude full.xml").file }
    def langNameExceptions = loadProperties(file('doc_src/lang_exceptions.properties'))
    def langInfos = docPropsFiles.toSorted{ it.parentFile.name }.collect { props ->
        def docVersion = loadProperties(props).version
        ['code': props.parentFile.name, 'nomanual': false, 'version': docVersion,
         'name': langNameExceptions[props.parentFile.name] ?:
                 Locale.forLanguageTag(props.parentFile.name.replace('_', '-')).getDisplayName(),
         'status': docVersion == omtVersion.version ? 'up-to-date' : 'out-of-date'] }
    def inputTemplate = file('doc_src/index_template.html')
    def outputIndex = layout.buildDirectory.file("docs/manual/index.html").get().asFile
    description = 'Generate the docs index file'
    inputs.files docPropsFiles, inputTemplate
    outputs.files file(outputIndex)
    from inputTemplate
    into outputIndex.parent
    rename('index_template.html', 'index.html')
    expand('languages': langInfos)
    filteringCharset = 'UTF-8'
    dependsOn manualHtmls
    group = 'documentation'
}

tasks.register('webManual', Sync) {
    group = 'documentation'
    description = 'Sync the HTML manual files'
    dependsOn manualHtmls, genDocIndex
    destinationDir = file(layout.buildDirectory.file("docs/htdocs"))
    from file(layout.buildDirectory.file("docs/manual"))
    from('release') {
        include 'doc-license.txt'
    }
}

ext.makeDocumentationTasks = { xml ->
    def lang = xml.parentFile.name
    def docbookInclude = tasks.register("docbookInclude${lang.capitalize()}", XIncludeTask) {
        styleSheetFile.set(styleDir.file('passthrough.xsl'))
        inputFile.set(file("${documentRootDir}/${lang}/OmegaTUsersManual_xinclude_full.xml"))
        outputs.file file(layout.buildDirectory.dir("docs/manual/${lang}/xhtml5/_index.xml"))
    }

    def copyCss = tasks.register("copyCss${lang.capitalize()}", Copy) {
        description 'Copy Images and CSS file to target'
        into layout.buildDirectory.dir("docs/manual/${lang}")
        from new File(documentRootDir, 'omegat.css')
    }

    def copyImages = tasks.register("copyImages${lang.capitalize()}", Copy) {
        description 'Copy Images and CSS file to target'
        into layout.buildDirectory.dir("docs/manual/${lang}/images/")
        from new File(documentRootDir, "${lang}/images/")
    }

    def docbookHtml = tasks.register("docbookHtml${lang.capitalize()}", DocbookHtml) {
        description 'Generate chunked HTML documentation'
        language.set(lang)
        inputFile.set(file("${documentRootDir}/${lang}/OmegaTUsersManual_xinclude_full.xml"))
        mainOutputFile.set(outputRoot.get().file("${language.get()}/xhtml5/_index.html"))
        styleSheetFile.set(styleDir.file("xhtml.xsl"))
        inputs.dir(documentRootDir)
        outputs.files(outputRoot.get().file("${language.get()}/xhtml5/_index.html"))
        dependsOn(docbookInclude, copyImages, copyCss)
    }

    def whcToc = tasks.register("whcToc${lang.capitalize()}", StylesheetTask) {
        description 'Generate whc header and index'
        language.set(lang)
        styleSheetFile.set(styleDir.file('whc-toc.xsl'))
        inputFile.set(outputRoot.get().file("${lang}/xhtml5/_index.html"))
        outputFile.set(outputRoot.get().file("${lang}/xhtml5/toc.xml"))
        dependsOn(docbookHtml)
    }

    def whcIndex = tasks.register("whcIndex${lang.capitalize()}", StylesheetTask) {
        description 'Generate whc header and index'
        language.set(lang)
        styleSheetFile.set(styleDir.file('whc-index.xsl'))
        inputFile.set(outputRoot.get().file("${lang}/xhtml5/_index.html"))
        outputFile.set(outputRoot.get().file("${lang}/xhtml5/index.html"))
        dependsOn(docbookHtml, whcToc)
    }

    def whcHeader = tasks.register("whcHeader${lang.capitalize()}", StylesheetTask) {
        description 'Generate whc header and index'
        language.set(lang)
        styleSheetFile.set(styleDir.file('whc-header.xsl'))
        inputFile.set(outputRoot.file("${lang}/xhtml5/_index.xml"))
        outputFile.set(outputRoot.get().file("${lang}/xhtml5/_header.xhtml"))
        dependsOn(docbookHtml)
    }

    def buildDocumentTask = tasks.register("buildDocument${lang.capitalize()}", WhcTask) {
        description 'Build whc contents'
        tocFile.set(outputRoot.get().file("${lang}/xhtml5/toc.xml"))
        inputFile.set(outputRoot.get().file("${lang}/xhtml5/index.html"))
        outputDirectory.set(outputRoot.get().dir("${lang}"))
        parameterList.set([
                'layout', 'simple',
                // 'user-header', "${language.get()}/xhtml5/_header.xhtml",
                '--navigation-background-color', '#FDFDFD',
                '--field-background-color', '#FDFDFD',
                '--panel-background-color', '#FDFDFD',
                'local-jquery', 'yes'
        ])
        contentFiles.set(fileTree(dir: "${outputRoot.get()}/${lang}/xhtml5", include: '*.html', exclude: '_*'))
        dependsOn(whcHeader, whcToc, whcIndex)
        doLast {
            project.delete(fileTree(dir: "${outputRoot.get()}/${lang}/xhtml5"))
            project.delete(file("${outputRoot.get()}/${lang}/xhtml5"))
        }
        group('documentation')
    }
    manualHtmls.dependsOn buildDocumentTask

    def zipTask= tasks.register("manualZip${lang.capitalize()}", Zip) {
        from fileTree(dir: layout.buildDirectory.file("docs/manual/${lang}"))
        exclude 'docs/manual/index.html'
        from fileTree(dir: "src/docs/${lang}", include: '**/version*.properties')
        archiveFileName = "${lang}.zip"
        destinationDirectory = file(layout.buildDirectory.dir("docs/manuals/"))
        dependsOn buildDocumentTask
    }
    assemble.dependsOn zipTask

    def languageName = new Locale(lang).displayName

    // Create a new publication for this language
    def publication = publishing.publications.create("manual${lang.capitalize()}", MavenPublication) {
        groupId = 'org.omegat'
        artifactId = "omegat-manual-${lang}"
        version = '6.1.0'

        // Add the jar task to the publication
        artifact(zipTask)

        pom {
            name = "OmegaT ${languageName} manual"
            description = "OmegaT ${languageName} manual"
            url = 'https://omegat.org'
            scm {
                connection = "scm:git:https://github.com/omegat-org/omegat-manual"
                developerConnection = "scm:git:https://github.com/omegat-org/omegat-manual"
                url = "https://github.com/omegat-org/omegat-manual"
            }
            licenses {
                license {
                    name = 'The GNU General Public License, Version 3.0'
                    url = 'https://www.gnu.org/licenses/licenses/gpl-3.0.html'
                }
            }
            developers {
                developer {
                    id = 'omegat'
                    name = 'OmegaT Developers'
                    email = 'info@omegat.org'
                }
            }
        }
    }

    publication
}

tasks.register('firstSteps') {
    description = 'Build First pages for all languages at docs/greetings/. Requires Docker.'
    group = 'documentation'
}

tasks.register('updateManuals') {
    group = 'documentation'
    description = 'Update Instant Start guides and HTML manuals.'
    dependsOn manualHtmls, firstSteps, genDocIndex
}

ext.firstStepsXmls = fileTree(dir: 'doc_src', include: '**/First_Steps.xml')
firstStepsXmls.each { xml ->
    def lang = xml.parentFile.name
    def taskName = "firstSteps${lang.capitalize()}"
    tasks.register(taskName, Exec) {
        inputs.files fileTree(dir: "doc_src/${lang}", include: 'First_Steps.xml')
        outputs.files fileTree(dir: layout.buildDirectory.file('docs/greetings/'),
                includes: ["${lang}/first_steps.html", "${lang}/OmegaT.css"])
        workingDir = 'doc_src'
        commandLine './docgen', "-Dlanguage=${lang}", "-Dtarget=../build/docs/greetings/${lang}", 'first-steps'
    }

    firstSteps.dependsOn taskName
}

ext.instantStartXmls = fileTree(dir: 'doc_src', include: '**/InstantStartGuide.xml')
instantStartXmls.each { xml ->
    def lang = xml.parentFile.name
    def taskName = "instantStartGuide${lang.capitalize()}"
    tasks.register(taskName, Exec) {
        inputs.files fileTree(dir: "doc_src/${lang}", includes: ['InstantStartGuide.xml', '**/InstantGuide*png'])
        outputs.files fileTree(dir: layout.buildDirectory.file('docs/greetings/'),
                includes: ["${lang}/first_steps.html", "${lang}/images/InstantGuide*png", "${lang}/OmegaT.css"])
        workingDir = 'doc_src'
        commandLine './docgen', "-Dlanguage=${lang}", "-Dtarget=../build/docs/greetings/${lang}", 'instant-start'
    }
    firstSteps.dependsOn taskName
}
