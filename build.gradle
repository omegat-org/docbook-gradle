import org.omegat.documentation.DocbookHtml
import org.omegat.documentation.WhcTask
import org.omegat.documentation.StylesheetTask

plugins {
    id 'org.omegat.documentation'
}

repositories {
    mavenCentral()
}

def documentRootDir = file('src/docs')

docConfig {
    styleDir.set(file('src/docs/xsl'))
    docRoot.set(documentRootDir)
    outputRoot.set(layout.buildDirectory.dir('docs'))
}

task docbookInclude(type: Exec) {
    def language = 'en'
    executable('/usr/bin/xmllint')
    commandLine '/usr/bin/xmllint', '--xinclude', '-o', layout.buildDirectory.dir("docs/${language}/xhtml5/_index.xml").get().toString(),
            "${documentRootDir}/${language}/OmegaTUsersManual_xinclude_full.xml"

    inputs.file file("${documentRootDir}/${language}/OmegaTUsersManual_xinclude_full.xml")
    outputs.file file(layout.buildDirectory.dir("docs/${language}/xhtml5/_index.xml"))
}

task copyCss(type: Copy) {
    description 'Copy Images and CSS file to target'
    def language = 'en'
    into layout.buildDirectory.dir("docs/${language}")
    from new File(documentRootDir, 'omegat.css')
}

task copyImages(type: Copy) {
    description 'Copy Images and CSS file to target'
    def language = 'en'
    into layout.buildDirectory.dir("docs/${language}/images/")
    from new File(documentRootDir, "${language}/images/")
}

task docbookHtml(type: DocbookHtml) {
    description 'Generate chunked HTML documentation'
    language.set("en")
    inputFile.set(outputRoot.get().file("${language.get()}/xhtml5/_index.xml"))
    mainOutputFile.set(outputRoot.get().file("${language.get()}/xhtml5/_index.html"))
    styleSheetFile.set(styleDir.file("xhtml.xsl"))
    inputs.dir(documentRootDir)
    outputs.files(outputRoot.get().file("${language.get()}/xhtml5/_index.html"))
    dependsOn(docbookInclude, copyImages, copyCss)
}

task whcToc(type: StylesheetTask) {
    description 'Generate whc header and index'
    language.set("en")
    styleSheetFile.set(styleDir.file('whc-toc.xsl'))
    inputFile.set(outputRoot.get().file("${language.get()}/xhtml5/_index.html"))
    outputFile.set(outputRoot.get().file("${language.get()}/xhtml5/toc.xml"))
    dependsOn(docbookHtml)
}

task whcIndex(type: StylesheetTask) {
    description 'Generate whc header and index'
    language.set("en")
    styleSheetFile.set(styleDir.file('whc-index.xsl'))
    inputFile.set(outputRoot.get().file("${language.get()}/xhtml5/_index.html"))
    outputFile.set(outputRoot.get().file("${language.get()}/xhtml5/index.html"))
    dependsOn(docbookHtml, whcToc)
}

task whcHeader(type: StylesheetTask) {
    description 'Generate whc header and index'
    language.set("en")
    styleSheetFile.set(styleDir.file('whc-header.xsl'))
    inputFile.set(outputRoot.file("${language.get()}/xhtml5/_index.xml"))
    outputFile.set(outputRoot.get().file("${language.get()}/xhtml5/_header.xhtml"))
    dependsOn(docbookHtml)
}

task buildDocument(type: WhcTask, group: 'build') {
    description 'Build whc contents'
    language.set("en")
    tocFile.set(outputRoot.get().file("${language.get()}/xhtml5/toc.xml"))
    inputFile.set(outputRoot.get().file("${language.get()}/xhtml5/index.html"))
    outputDirectory.set(outputRoot.get().dir("${language.get()}"))
    parameterList.set([
            'layout', 'simple',
            // 'user-header', "${language.get()}/xhtml5/_header.xhtml",
            '--navigation-background-color', '#FDFDFD',
            '--field-background-color', '#FDFDFD',
            '--panel-background-color', '#FDFDFD',
            'local-jquery', 'yes'
    ])
    contentFiles.set(fileTree(dir: "${outputRoot.get()}/${language.get()}/xhtml5", include: '*.html', exclude: '_*'))
    dependsOn(whcHeader, whcToc, whcIndex)
}